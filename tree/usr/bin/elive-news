#!/bin/bash
SOURCE="$0"
source /usr/lib/elive-tools/functions
EL_REPORTS="1"
el_make_environment
. gettext.sh
TEXTDOMAIN="elive-news"
export TEXTDOMAIN

# Lock system (good one) {{{
lockfile="/tmp/.$(basename $0)-${USER}.lock"
#set -x

exit_ok(){
    rm -f "$lockfile"
}
exit_error(){
    rm -f "$lockfile"
}

if [[ -r "$lockfile" ]] ; then
    PROCCESS="$(cat $lockfile)"
else
    PROCCESS=" "
fi
if (ps up $PROCCESS) 1>/dev/null 2>&1 ; then
    el_error "$(basename $0) already running"
    exit
else
    echo $$ > "$lockfile"
fi

# traps needs to be after the lock verification, in order to not remove it when we are already running
trap "exit_ok" EXIT
trap "exit_error" 1 3 5 6 14 ERR

# SET the lock file
echo "$$" > "$lockfile"


# end lock system }}}

main(){
    # pre {{{
    local feed line title link category menu_news conf arg

    # never run on live mode
    if grep -qs "boot=live" /proc/cmdline ; then
        exit
    fi

    # this link is only for releases:
    #feed="https://feeds.feedburner.com/elivecd/IQfT"
    # this link includes all the updates in elive pages (releases, news, posts published, etc...)
    feed="https://feeds.feedburner.com/EliveLinuxWebsiteUpdates"
    #feed="https://www.elivecd.org/feed/"
    #news_history="$HOME/.cache/$(basename $0)/news-history.txt"
    # history's should be based in the news feed to catch, in order to avoid mixed states
    news_history="$HOME/.cache/$(basename $0)/news-history--${feed//\//%}.txt"

    if ! [[ -e "$news_history" ]] ; then
        mkdir -p "$( dirname "$news_history" )"
        is_first_time=1
    fi
    #curl -L "$feed" > "/tmp/feed.xml" # tests/debug

    # do not run in the same user's session: update: not tested - no needed, if this is run only when destkop starts, which is more or less the same
    #if el_flag check "elive-news" ; then
        #exit
    #fi
    #el_flag add "elive-news"

    # }}}

    for arg in "$@"
    do
        case "$arg" in
            --delayed)
                is_delayed=1
                shift
                ;;
        esac
    done

    if ((is_delayed)) ; then
        el_debug "delayed 20 seconds"
        sleep 20
    fi

    while read -ru 3 line
    do
        # title:  <title>Elive 2.9.26 beta released</title>
        if [[ "$line" = *"<title>"*"</title>"* ]] ; then
            line="${line#*<title>}"
            line="${line%</title>*}"
            # skip invalid ones
            if [[ "$line" = "News"*"Elive Linux" ]] ; then
                continue
            fi
            #el_debug "title: $title"
            title="$line"
        fi

        #link:  <link>http://feedproxy.google.com/~r/elivecd/IQfT/~3/pUtohK1YFC8/</link>   # this will redirect and should be the correct link
        if [[ "$line" = *"<link>http"*"</link>"* ]] ; then
            line="http${line#*>http}"
            line="${line%</link>*}"
            #el_debug "link: $link"
            link="$line"
        fi

        # category:  <category><![CDATA[Beta]]></category>
        if [[ "$line" = *"<category>"*"CDATA"*"</category>"* ]] ; then
            line="${line#*CDATA[}"
            line="${line%]]>*}"
            #el_debug "category: $category"
            category="$line $category"

            # ignore some categories
            if echo "$category" | grep -qsiE "(testimonials)" ; then
                unset link title category
                continue
            fi
        fi

        if [[ "$line" = *"</item>"* ]] && [[ -n "$title" ]] && [[ -n "$link" ]] ; then
            #if ! LC_ALL=C grep -qs "^${title}::${link}::" "$news_history" ; then
            if ! LC_ALL=C grep -qs "^${title}::${link}::" "$news_history" ; then
                # always write the conf? (will not require the manual Exit)
                #echo "${title}::${link}::${category}" >> "$news_history"
                el_array_member_add "${category}: ${title}!web-launcher '${link}'!star|" "${menu_news_entry_a[@]}" ; menu_news_entry_a=("${_out[@]}")
                el_array_member_add "${title}::${link}::${category}" "${news_entries_a[@]}" ; news_entries_a=("${_out[@]}")
                el_debug "NEW $title"
            else
                el_debug "OLD $title"
            fi
            #echo "$title"
            #echo "$link"
            #echo "$category"
            unset title link category
        fi

    done 3<<< "$( curl -L -s --user-agent "Mozilla/5.0" "$feed" )"
    #done 3<<< "$( cat "/tmp/feed.xml")" # test/debug

    menu_news="$( echo "${menu_news_entry_a[@]}" | sed -e 's;| ;|;g' )"
    read -r menu_news <<< "$menu_news"

    #if yad --notification --command="ls" --menu="${menu_news_entry_a[@]}Exit!quit!cancel" --image=news-icon ; then
    if [[ -n "$menu_news" ]] ; then
        local message_exit message_check_news
        message_exit="$( printf "$( eval_gettext "Close window" )" "" )"
        message_check_news="$( printf "$( eval_gettext "Read the last news from Elive in the corner systray. Right click to exit." )" "" )"

        if ((is_first_time)) ; then
            for line in "${news_entries_a[@]}"
            do
                echo "$line" >> "$news_history"
            done
        else
            # tell the user first
            #notify-send -t 50000 -i text-x-news "Elive News" "$message_check_news"
            el_notify normal "text-x-news" "$( eval_gettext "Elive News" )" "$message_check_news"

            if yad --notification --command="web-launcher 'https://www.elivecd.org/news'" --menu="${menu_news}${message_exit}!quit!cancel" --image=text-x-news ; then
                # write the conf only if the user has clicked to Exit, otherwise will appear again in the next session
                for line in "${news_entries_a[@]}"
                do
                    echo "$line" >> "$news_history"
                done
            fi

        fi
    fi

    # this message is only for testing purposes of eltrans, remove it in the future after the eltrans tests has been done
    #local message_test
    #message_test="$( printf "$( eval_gettext "TEST MESSAGE: ignore this message, only used for eltrans betatesting: %s test2" )" "(test %s string)" )"
    #el_debug "$message_test"

}

#
#  MAIN
#
main "$@"

# vim: set foldmethod=marker :
